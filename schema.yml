openapi: 3.0.3
info:
  title: UniHaven - An API that better help students arrange accommodations!
  version: 1.0.0

tags:
  - name: House
    description: All details of a specific house.
  - name: House List
    description: List of the houses available in the system.
  - name: Reservation
    description: Reservations made by students and managed by specialists.
paths:
  /api/house/{house_id}/:
    get:
      operationId: house_retrieve
      summary: Return all the information of a specific house.
      parameters:
      - in: path
        name: house_id
        schema:
          type: integer
        required: true
      tags:
      - House
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: 'Return the full details of the house.'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error message when the house is not found.'
    post:
      operationId: house_create
      summary: Update a specific existing House object.
      parameters:
      - in: path
        name: house_id
        schema:
          type: integer
        required: true
      tags:
      - House
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/House'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/House'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: 'Return the updated house object.'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error message when the house is not found.'
  /api/list/:
    get:
      operationId: list_retrieve
      summary: "Show a filtered and sorted list of houses."
      parameters:
        - in: query
          name: "name"
          schema:
            type: string
            maxLength: 100
          required: false
          description: "Name of the house/building."
        - in: query
          name: "type"
          schema:
            type: string
            maxLength: 100
          required: false
          description: "Type of the house/building."
        - in: query
          name: "rent"
          schema:
            type: string
            enum:
              - "<5000"
              - "5000-10000"
              - ">10000"
          required: false
          description: 'Rent per month.'
        - in: query
          name: "beds"
          schema:
            type: integer
            maximum: 10
            minimum: 0
          required: false
          description: "Request values over 3 will be filtered to the same class."
        - in: query
          name: "bedrooms"
          schema:
            type: integer
            maximum: 10
            minimum: 0
          required: false
          description: "Request values over 3 will be filtered to the same class."
        - in: query
          name: "available_from"
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: "available_to"
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: "sort"
          schema:
            type: string
            enum:
              - "type"
              - "rent"
              - "beds"
              - "bedrooms"
              - "available_from"
              - "available_to"
              - "MC"
              - "SRC"
              - "SIMS"
              - "KC"
              - "FoD"
          required: false
      tags:
      - House List
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error message when no house meets the constraint.'

    put:
      operationId: list_create
      summary: Create a new house object.
      tags:
      - House List
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/House'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/House'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
          description: 'Return the details of the new house, including the auto-generated information.'
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error message when the new house can not be uploaded.'
  /api/ratings/:
    get:
      operationId: ratings_retrieve
      summary: |-
        Get a list of ratings for a house

        Required parameters:
        - house_id: House ID
      tags:
      - ratings
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
          description: ''
    post:
      operationId: ratings_create
      summary: |-
        Add a rating for a house

        Required parameters:
        - house_id: House ID
        - student_id: Student ID
        - score: Rating (0.0-5.0)
        - comment: Review text
      tags:
      - ratings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rating'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
          description: ''
  /api/reservation/:
    get:
      operationId: api_reservation_retrieve
      summary:
        "For students, this returns all his/her history reservations.\n\n
        For specialists, this returns all reservations he/she manages."
      tags:
      - Reservation
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      parameters:
        - in: query
          name: "identity"
          schema:
            type: string
            enum:
            - "student"
            - "specialist"
        - in: query
          name: "id"
          schema:
            type: integer
            format: int64
          description: 'UID of the student/specialist.'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: 'Return all history reservations made/managed by the student/specialist.'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error message when no reservation is found.'
    post:
      operationId: api_reservation_create
      summary: |-
        Update the existing reservation for students or specialists.
      tags:
      - Reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      parameters:
        - in: query
          name: "identity"
          schema:
            type: string
            enum:
            - "student"
            - "specialist"
        - in: query
          name: "id"
          schema:
            type: integer
            format: int64
        - in: query
          name: "action"
          schema:
            type: string
            enum:
              - "confirm"
              - "cancel"
          description: "WARNING: 'confirm' is ONLY available to specialists."
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: 'Return the updated reservation.'
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error in updating the reservation.'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error message when the reservation does not exist.'
    put:
      operationId: api_reservation_update
      summary: 
        Create a new reservation.
      tags:
      -  Reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      parameters:
        - in: query
          name: "student"
          schema:
            type: integer
            format: int64
          required: true
          description: "UID of the student."
        - in: query
          name: "manager"
          schema:
            type: integer
            format: int32
          required: true
          description: "ID of the specialist to manage the reservation."
        - in: query
          name: "period_from"
          schema:
            type: string
            format: date
          required: true
        - in: query
          name: "period_to"
          schema:
            type: string
            format: date
          required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: 'Return the new reservation, including the auto-generated information.'
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 'Return the error in creating the reservation.'
components:
  schemas:
    House:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        type:
          type: string
          maxLength: 100
        rent:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        beds:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        bedrooms:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        available_from:
          type: string
          format: date
        available_to:
          type: string
          format: date
        description:
          type: string
        MC:
          type: number
          format: double
          description: "Distance to the Main Campus"
        SRC:
          type: number
          format: double
          description: "Distance to the Seassoon Road Campus"
        SIMS:
          type: number
          format: double
          description: "Distance to the Swire Institude of Marine Science"
        KC:
          type: number
          format: double
          description: "Distance to Kadoorie Centre"
        FoD:
          type: number
          format: double
          description: "Distance to the Faculty of Dentistry"
        landlord:
          type: integer
      required:
      - available_from
      - available_to
      - bedrooms
      - beds
      - description
      - id
      - landlord
      - name
      - rent
      - type
    Rating:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        score:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        comment:
          type: string
        created_at:
          type: string
          format: date-time
        house:
          type: integer
        student:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
      required:
      - comment
      - house
      - id
      - student
    Reservation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        period_from:
          type: string
          format: date
        period_to:
          type: string
          format: date
        create_date:
          type: string
          format: date-time
        student:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        manager:
          type: integer
        house_id:
          type: integer
      required:
      - house_id
      - id
      - manager
      - period_from
      - period_to
      - status
      - student
    StatusEnum:
      enum:
      - Pending
      - Confirmed
      - Cancelled
      type: string
      description: |-
        * `Pending` - Pending
        * `Confirmed` - Confirmed
        * `Cancelled` - Cancelled
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
